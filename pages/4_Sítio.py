import streamlit as st
import pandas as pd
import openpyxl
import re
import io
from openpyxl import load_workbook

# Verifica√ß√£o de login. Se n√£o estiver logado, exibe uma mensagem e para o script.
if not st.session_state.get('is_logged_in'):
    st.warning("Voc√™ precisa estar logado para acessar esta p√°gina.")
    st.stop()

st.title("Setor S√≠tio")
st.markdown("Bem-vindo(a) ao setor S√≠tio. Abaixo est√° o script dispon√≠vel para an√°lise.")

st.write("---")
st.subheader("üè° S√≠tio Santa Izabel")
st.markdown("Este script processa a planilha de controle do S√≠tio Santa Izabel e a divide em abas com base nos lan√ßamentos.")

def normalize_columns(columns_list):
    """
    Normaliza uma lista de nomes de colunas, removendo espa√ßos extras,
    caracteres especiais e quebras de linha.
    """
    normalized_list = []
    for col in columns_list:
        col = re.sub(r'\s+', ' ', col).strip()
        col = col.replace('\n', ' ')
        normalized_list.append(col)
    return normalized_list

uploaded_file = st.file_uploader("Envie o arquivo 'S√çTIO SANTA IZABEL.xlsx'", type=["xlsx"])

if uploaded_file is not None:
    try:
        df = pd.read_excel(uploaded_file, engine='openpyxl')
        st.subheader("üìÑ Dados Originais")
        st.dataframe(df.head())

        df.columns = normalize_columns(df.columns)

        planilhas_config = {
            'Pulveriza√ß√£o': [
                'Carimbo de data/hora', 'Qual lan√ßamento', 'Qual Talh√£o?',
                'Diagn√≥stico e Justificativa', 'Fase Fenol√≥gica', 'Previs√£o colheita',
                'Problema Alvo (Praga, Doen√ßa, Planta Daninha ou Defici√™ncia Nutricional)',
                'Diagn√≥stico e N√≠vel de Infesta√ß√£o/Ocorr√™ncia (Descri√ß√£o detalhada)',
                'Justificativa T√©cnica para a Recomenda√ß√£o',
                'PRODUTO (N.C*E I.A.**)','Volume de Calda Recomendado (L/ha)',
                'Equipamento de aplica√ß√£o', 'N√∫mero de Aplica√ß√µes Recomendadas',
                'Intervalo entre Aplica√ß√µes (dias - se houver mais de uma)', 
                'Modo de Aplica√ß√£o','√âpoca/Est√°dio de Aplica√ß√£o',
                'Intervalo de Seguran√ßa/Per√≠odo de Car√™ncia (dias)',
                'Intervalo de Reentrada na √Årea (horas)',
                'Equipamento de Prote√ß√£o Individual (EPI)',
                'Condi√ß√µes Clim√°ticas Ideais para Aplica√ß√£o ex: "Evitar ventos acima de 10 km/h, temperatura abaixo de 30¬∞C, umidade relativa acima de 55%"',
                'Cuidados com a Calda e Descarte de Embalagens ex: "Realizar tr√≠plice lavagem das embalagens e descart√°-las em locais indicados"',
                'Informa√ß√µes sobre Mistura em Tanque (se aplic√°vel)',
                'Observa√ß√µes Adicionais/Advert√™ncias',
            ],
            'Controle de Irriga√ß√£o': [
                'Carimbo de data/hora', 'Qual lan√ßamento', 'Per√≠odo', 'Setor/Talh√£o', 
                'Hora(s) de irriga√ß√£o', 'Volume de √Ågua (L)', 'Tipo de Irriga√ß√£o',
                'Observa√ß√µes (Clima/Outros)', 'Respons√°vel', 'Pr√≥xima Irriga√ß√£o Sugerida'
            ],
            'Controle de Pragas': [
                'Carimbo de data/hora', 'Qual lan√ßamento', 'DATA (3)', 'PRAGA', 'RECOMENDA√á√ÉO',
                'RECEITA', 'MODO DE APLICA√á√ÉO', 'PER√çODO', 'OBSERVA√á√ÉO'
            ],
            'Pluvi√¥metro - (somente em dias de chuva)': [
                'Carimbo de data/hora', 'Qual lan√ßamento', 'DATA (1)', 'LEITURA(MM)', 'OBSERVA√á√ïES'
            ],
            'Hidr√¥metro': [
                'Carimbo de data/hora', 'Qual lan√ßamento', 'DATA (2)', 'LEITURA (m¬≥)'
            ],
            'Lavagem de EPIs': [
                'Carimbo de data/hora', 'Qual lan√ßamento', 'Data da Lavagem:', 'Respons√°vel pela Lavagem ',
                'Local da Lavagem', 'EPI', 'Agente de Limpeza Utilizado:', 'Temperatura da √Ågua', 'Ciclos de enxague',
                'Condi√ß√µes de Armazenamento'
            ],
            'Registro de aplica√ß√µes': [
                'Carimbo de data/hora', 'Qual lan√ßamento', 'Cultura e/ou Variedade Tratada',
                'Local da Aplica√ß√£o  ( Por favor, especifique a zona geogr√°fica, nome/refer√™ncia da explora√ß√£o, e o campo de produ√ß√£o, pomar, estufa ou instala√ß√£o onde a cultura se encontra.)',
                'Data de In√≠cio da Aplica√ß√£o',
                'Data de Fim da Aplica√ß√£o',
                'Nome Comercial Registrado do Produto',
                'Intervalo de Seguran√ßa Pr√©-Colheita (PHS)',
                'Quantidade de Produto Aplicado',
                'Concentra√ß√£o ou Frequ√™ncia',
                'Nome Completo do Aplicador',
                'Nome Completo da Pessoa Tecnicamente Respons√°vel',
            ],
            'Limpeza do Local': [
                'Carimbo de data/hora', 'Qual lan√ßamento', 'LOCAL', '  Marque com "X" a op√ß√£o que melhor descreve o estado de limpeza   [PISOS]',
                '  Marque com "X" a op√ß√£o que melhor descreve o estado de limpeza   [LIXEIRAS]', '  Marque com "X" a op√ß√£o que melhor descreve o estado de limpeza   [Superf√≠cies (mesas, bancadas)]',
                '  Marque com "X" a op√ß√£o que melhor descreve o estado de limpeza   [Janelas e vidros]', 
                '  Marque com "X" a op√ß√£o que melhor descreve o estado de limpeza   [Banheiros]', '  Marque com "X" a op√ß√£o que melhor descreve o estado de limpeza   [Descarte de res√≠duos]',
                '  Marque com "X" a op√ß√£o que melhor descreve o estado de limpeza   [Organiza√ß√£o geral]',
                'Problemas encontrados', 'Sugest√µes para melhoria'
            ],
            'Limpeza dos Equipamentos e Dispositivos': [
                'Qual a Limpeza (7)', 'Data da Lavagem  (7)', 'Item Lavado  (7)', 'Produto Utilizado  (7)', 'Procedimento de Lavagem  (Exemplo  "submers√£o" , "pr√©-lavagem") (7)',
                'Respons√°vel pela Lavagem (7)', 'Observa√ß√µes  (7)' 
            ]
        }
        
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            for sheet_name, columns in planilhas_config.items():
                try:
                    normalized_columns = normalize_columns(columns)
                    if sheet_name == 'Pulveriza√ß√£o':
                        for col in df.columns:
                            if re.search(r'\(\d+\)', col) and col not in ['DATA (1)', 'DATA (2)', 'DATA (3)']:
                                normalized_columns.append(col)
                        normalized_columns = list(dict.fromkeys(normalized_columns))

                    df_filtered = df[df['Qual lan√ßamento'] == sheet_name]
                    existing_columns = [col for col in normalized_columns if col in df_filtered.columns]
                    df_sheet = df_filtered[existing_columns]

                    df_sheet.to_excel(writer, sheet_name=sheet_name, index=False)
                    st.info(f"Aba '{sheet_name}' criada com sucesso.")

                except KeyError as e:
                    st.warning(f"Aviso: Ocorreu um erro ao filtrar a aba '{sheet_name}'. Verifique se o nome da aba est√° correto.")
                    continue
        
        output.seek(0)
        st.subheader("‚úÖ Processo Conclu√≠do")
        st.success("O arquivo foi processado e est√° pronto para download.")
        
        st.download_button(
            label="üì• Baixar Arquivo Processado",
            data=output,
            file_name="sitio_santaizabel.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    except Exception as e:
        st.error(f"Ocorreu um erro ao processar o arquivo: {e}")
